import pandas as pd
import regex
from datetime import datetime

def process_bx_books(df):

    br_pattern = r"\((?:[^()]++|(?R))*+\)"

    non_ASCII_pattern = regex.compile(r"[^\x00-\x7F]")

    clean_text = lambda cell: regex.sub(br_pattern, '', cell).strip().replace('"', '').lower()

    non_ASCII = lambda cell: bool(non_ASCII_pattern.search(cell))

    df["Book-Title"] = df["Book-Title"].apply(clean_text)
    df["Book-Author"] = df["Book-Author"].apply(clean_text)
    df["Book-Publisher"] = df["Book-Publisher"].apply(clean_text)

    non_english_rows = df[df.apply(lambda row: any(non_ASCII(row[col]) for col in ["Book-Title", "Book-Author", "Book-Publisher"]), axis=1)]
    df = df.drop(non_english_rows.index)

    df = df[df["Year-Of-Publication"].apply(lambda x: x.isdigit() and 1900 <= int(x) <= datetime.now().year)]

    return df


def process_bx_new_books(df):

    br_pattern = r"\((?:[^()]++|(?R))*+\)"

    non_ASCII_pattern = regex.compile(r"[^\x00-\x7F]+")

    clean_text = lambda cell: regex.sub(br_pattern, '', cell).strip().replace('"', '').lower()

    non_ASCII = lambda cell: bool(non_ASCII_pattern.search(cell))

    df["Book-Title"] = df["Book-Title"].apply(clean_text)
    df["Book-Author"] = df["Book-Author"].apply(clean_text)
    df["Book-Publisher"] = df["Book-Publisher"].apply(clean_text)

    non_english_rows = df[df.apply(lambda row: any(non_ASCII(row[col]) for col in ["Book-Title", "Book-Author", "Book-Publisher"]), axis=1)]
    df = df.drop(non_english_rows.index)

    df["Year-Of-Publication"] = pd.to_numeric(df["Year-Of-Publication"], errors='coerce')
    df = df[df["Year-Of-Publication"].notna() & df["Year-Of-Publication"].between(1900, 2022)]

    return df


def process_bx_users(df):

    df["User-State"] = df["User-State"].apply(lambda x: x.strip().lower() if pd.notna(x) else x)
    df["User-Country"] = df["User-Country"].apply(lambda x: x.replace('"', '').strip().lower() if pd.notna(x) else x)

    df["User-Age"] = pd.to_numeric(df["User-Age"], errors='coerce')
    df = df[df["User-Age"].notna() & df["User-Age"].between(10, 100)]

    bins = [0, 1945, 1964, 1980, 1996, 2012, np.inf]
    labels = ["Silent Generation", "Baby Boomers", "Generation X", "Millennials", "Generation Z", "Generation Alpha"]
    df['Generation'] = pd.cut(df['User-Age'], bins=bins, labels=labels, right=False)

    return df

def process_bx_new_books_users(df):

    df["User-State"] = df["User-State"].apply(lambda x: regex.sub(r"[^\w\s]", '', x).strip().lower() if pd.notna(x) else x)
    df["User-Country"] = df["User-Country"].apply(lambda x: x.replace('"', '').strip().lower() if pd.notna(x) else x)

    df["User-Age"] = pd.to_numeric(df["User-Age"], errors='coerce')
    df = df[df["User-Age"].notna() & df["User-Age"].between(10, 100)]

    bins = [0, 1945, 1964, 1980, 1996, 2012, np.inf]
    labels = ["Silent Generation", "Baby Boomers", "Generation X", "Millennials", "Generation Z", "Generation Alpha"]
    df['Generation'] = pd.cut(df['User-Age'], bins=bins, labels=labels, right=False)

    return df


def process_bx_ratings(df):
    df['Book-Rating'] = pd.to_numeric(df['Book-Rating'], errors='coerce')
    return df[df['Book-Rating'].between(1, 10)]


def process_bx_new_books_ratings(df):
    df['Book-Rating'] = pd.to_numeric(df['Book-Rating'], errors='coerce')
    return df[df['Book-Rating'].between(1, 10)]

